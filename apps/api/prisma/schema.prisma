// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  name               String?
  email              String         @unique
  passwordHash       String?         @map("password_hash")
  avatarUrl          String?        @map("avatar_url")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @default(now()) @updatedAt @map("updated_at")
  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  owns_projects            Project[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountID String          @unique @map("provider_account_id")
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  // this is a unique constraint that says that the combination of provider and userId must be unique
  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  author User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id             String       @id @default(uuid())
  role           Role         @default(MEMBER)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                       String  @id @default(uuid())
  name                     String
  slug                     String  @unique
  domain                   String? @unique
  shouldAttachUserByDomain Boolean @default(false) @map("should_attach_user_by_domain")
  avatarUrl                String? @map("avatar_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  invites Invite[]
  members Member[]
  owner   User      @relation(fields: [ownerId], references: [id])
  ownerId  String
  projects Project[]

  @@map("organizations")
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String
  slug        String  @unique
  avatarUrl   String? @map("avatar_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  owner  User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@map("projects")
}
